\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Details of the\nobreakspace  {}method}{21}{chapter.4}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:details}{{4}{21}{Details of the~method}{chapter.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Bottom-up pass}{21}{section.4.1}}
\newlabel{sec:bottom-up}{{4.1}{21}{Bottom-up pass}{section.4.1}{}}
\newlabel{eq:averaging}{{4.1}{21}{Bottom-up pass}{equation.4.1.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Top-down pass}{22}{section.4.2}}
\newlabel{sec:top-down}{{4.2}{22}{Top-down pass}{section.4.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces An example of the\nobreakspace  {}averaging used to produce mip-maps; each mip-map is produced from the\nobreakspace  {}previous larger one by averaging of each four neighboring pixels. The\nobreakspace  {}brighter a\nobreakspace  {}pixel, the\nobreakspace  {}higher point it represents.}}{23}{figure.4.1}}
\newlabel{fig:averaging}{{4.1}{23}{An example of the~averaging used to produce mip-maps; each mip-map is produced from the~previous larger one by averaging of each four neighboring pixels. The~brighter a~pixel, the~higher point it represents}{figure.4.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces Substituting the\nobreakspace  {}pixel p in $\mathbold  {L_{i}^\bullet }$ with four pixels in $\mathbold  {L_{i+1}^\bullet }$}}{24}{figure.4.2}}
\newlabel{fig:subst}{{4.2}{24}{Substituting the~pixel p in $\ldot {i}$ with four pixels in $\ldot {i+1}$}{figure.4.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.3}{\ignorespaces The\nobreakspace  {}prediction operator of $b$ - $\mathit  {P_{b}}$ - averages the\nobreakspace  {}compressed heights at all the\nobreakspace  {}displayed $a\bullet $.}}{24}{figure.4.3}}
\newlabel{fig:bcomp}{{4.3}{24}{The~prediction operator of $b$ - $\opnorm {P}{b}$ - averages the~compressed heights at all the~displayed $a\bullet $}{figure.4.3}{}}
\newlabel{eq:a}{{4.2}{24}{Top-down pass}{equation.4.2.2}{}}
\newlabel{eq:b}{{4.3}{24}{Top-down pass}{equation.4.2.3}{}}
\citation{cbdam}
\citation{cbdam}
\@writefile{lof}{\contentsline {figure}{\numberline {4.4}{\ignorespaces Handling of border cases in the\nobreakspace  {}computation of $\mathit  {P_{b}}$ - the\nobreakspace  {}red line represents the\nobreakspace  {}border. From among all the\nobreakspace  {}points which can be reached by the\nobreakspace  {}filter (marked as blue), only the\nobreakspace  {}interior ones (additionally marked with a\nobreakspace  {}dot) are averaged.}}{25}{figure.4.4}}
\newlabel{fig:bborders}{{4.4}{25}{Handling of border cases in the~computation of $\opnorm {P}{b}$ - the~red line represents the~border. From among all the~points which can be reached by the~filter (marked as blue), only the~interior ones (additionally marked with a~dot) are averaged}{figure.4.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.5}{\ignorespaces The\nobreakspace  {}order 4 Neville interpolating filter as used in C-BDAM. Centered at the\nobreakspace  {}black point marked with a\nobreakspace  {}cross, it calculates a\nobreakspace  {}weighted sum of the\nobreakspace  {}grey points, the\nobreakspace  {}number on each of which stands for its weight inside the\nobreakspace  {}sum.}}{26}{figure.4.5}}
\newlabel{fig:order4}{{4.5}{26}{The~order 4 Neville interpolating filter as used in C-BDAM. Centered at the~black point marked with a~cross, it calculates a~weighted sum of the~grey points, the~number on each of which stands for its weight inside the~sum}{figure.4.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.6}{\ignorespaces A\nobreakspace  {}2D intuition into the\nobreakspace  {}function of order 4 filter illustrated on three examples. The\nobreakspace  {}black points are the\nobreakspace  {}ones with a\nobreakspace  {}positive weight inside the\nobreakspace  {}filter, the\nobreakspace  {}red ones have negative weights. The\nobreakspace  {}blue points represent the\nobreakspace  {}resulting predictions. The\nobreakspace  {}top example shows how the\nobreakspace  {}filter behaves on flat terrain - thanks to the\nobreakspace  {}fact that the\nobreakspace  {}overal sum of weights is 0, the\nobreakspace  {}prediction lies exactly on the\nobreakspace  {}terrain. The\nobreakspace  {}other two examples show sharp terrain, with the\nobreakspace  {}predicted point located near the\nobreakspace  {}terrain extreme - the\nobreakspace  {}bottom of valley in the\nobreakspace  {}center example and the\nobreakspace  {}top of hill in the\nobreakspace  {}lower example. Thanks to the\nobreakspace  {}fact that the\nobreakspace  {}red points have negative weights, the\nobreakspace  {}resulting predictions can get close to the\nobreakspace  {}actual terrain in these cases. Of course, these examples are quite synthetic and the\nobreakspace  {}2D view is a\nobreakspace  {}significant simplification, but the\nobreakspace  {}principle remains the\nobreakspace  {}same in practice: the\nobreakspace  {}order 4 filter is able to capture the\nobreakspace  {}trend (derivation) of terrain between its border points (the\nobreakspace  {}ones with the\nobreakspace  {}negative weights) and the\nobreakspace  {}interior points (the\nobreakspace  {}ones with the\nobreakspace  {}positive weights).}}{26}{figure.4.6}}
\newlabel{fig:order4_hills}{{4.6}{26}{A~2D intuition into the~function of order 4 filter illustrated on three examples. The~black points are the~ones with a~positive weight inside the~filter, the~red ones have negative weights. The~blue points represent the~resulting predictions. The~top example shows how the~filter behaves on flat terrain - thanks to the~fact that the~overal sum of weights is 0, the~prediction lies exactly on the~terrain. The~other two examples show sharp terrain, with the~predicted point located near the~terrain extreme - the~bottom of valley in the~center example and the~top of hill in the~lower example. Thanks to the~fact that the~red points have negative weights, the~resulting predictions can get close to the~actual terrain in these cases. Of course, these examples are quite synthetic and the~2D view is a~significant simplification, but the~principle remains the~same in practice: the~order 4 filter is able to capture the~trend (derivation) of terrain between its border points (the~ones with the~negative weights) and the~interior points (the~ones with the~positive weights)}{figure.4.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.7}{\ignorespaces The\nobreakspace  {}caching of $\mathit  {P_{b}}$ during a\nobreakspace  {}horizontal traversal computing predictions of all $b$ pixels. The\nobreakspace  {}arrow above the\nobreakspace  {}grid shows the\nobreakspace  {}direction of traversal - left to right, so that $b_1$ is predicted as first, $b_2$ as second and the\nobreakspace  {}traversal might continue further to the\nobreakspace  {}right. The\nobreakspace  {}left-right-stripped pixels are averaged to predict $b_1$, whereas the\nobreakspace  {}right-left-stripped pixels are averaged to predict $b_2$. Two pixels are inside both groups - they are stripped in both ways. Thus, the\nobreakspace  {}sum of them can be cached during the\nobreakspace  {}prediction of $b_1$ and reused inside the\nobreakspace  {}prediction of $b_2$, sparing one summation per prediction this way.}}{27}{figure.4.7}}
\newlabel{fig:bcaching}{{4.7}{27}{The~caching of $\opnorm {P}{b}$ during a~horizontal traversal computing predictions of all $b$ pixels. The~arrow above the~grid shows the~direction of traversal - left to right, so that $b_1$ is predicted as first, $b_2$ as second and the~traversal might continue further to the~right. The~left-right-stripped pixels are averaged to predict $b_1$, whereas the~right-left-stripped pixels are averaged to predict $b_2$. Two pixels are inside both groups - they are stripped in both ways. Thus, the~sum of them can be cached during the~prediction of $b_1$ and reused inside the~prediction of $b_2$, sparing one summation per prediction this way}{figure.4.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.8}{\ignorespaces Two examples of the\nobreakspace  {}difference between artifacts caused by order 2 and order 4 filters near smooth terrain's border - in the\nobreakspace  {}first row there are the\nobreakspace  {}target heightmaps, in the\nobreakspace  {}second, there are the\nobreakspace  {}same heightmaps compressed using the\nobreakspace  {}order 2 filter, in the\nobreakspace  {}third row, the\nobreakspace  {}heightmaps compressed with the\nobreakspace  {}order 4 filter.}}{28}{figure.4.8}}
\newlabel{fig:artifs_border}{{4.8}{28}{Two examples of the~difference between artifacts caused by order 2 and order 4 filters near smooth terrain's border - in the~first row there are the~target heightmaps, in the~second, there are the~same heightmaps compressed using the~order 2 filter, in the~third row, the~heightmaps compressed with the~order 4 filter}{figure.4.8}{}}
\newlabel{eq:c}{{4.4}{28}{Top-down pass}{equation.4.2.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.9}{\ignorespaces Two examples of the\nobreakspace  {}difference between artifacts caused by order 2 and order 4 filters near a\nobreakspace  {}sharp terrain change - in the\nobreakspace  {}first row there are the\nobreakspace  {}target heightmaps, in the\nobreakspace  {}second row, the\nobreakspace  {}same heightmaps compressed using the\nobreakspace  {}order 2 filter, in the\nobreakspace  {}third row, the\nobreakspace  {}heightmaps compressed with the\nobreakspace  {}order 4 filter. The\nobreakspace  {}span of the\nobreakspace  {}values in the\nobreakspace  {}original images is from 0 to 16 and the\nobreakspace  {}maximum absolute deviation ($D$) of compression is set to 9.}}{29}{figure.4.9}}
\newlabel{fig:artifs_sharp_change}{{4.9}{29}{Two examples of the~difference between artifacts caused by order 2 and order 4 filters near a~sharp terrain change - in the~first row there are the~target heightmaps, in the~second row, the~same heightmaps compressed using the~order 2 filter, in the~third row, the~heightmaps compressed with the~order 4 filter. The~span of the~values in the~original images is from 0 to 16 and the~maximum absolute deviation ($D$) of compression is set to 9}{figure.4.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.10}{\ignorespaces Two illustrations of how artifacts can occur near sharp terrain changes - the\nobreakspace  {}black dots stand for the\nobreakspace  {}predictions which are still within the\nobreakspace  {}maximum-error bound $D$ from the\nobreakspace  {}target terrain, the\nobreakspace  {}blue dots represent the\nobreakspace  {}predictions which are just slightly further from the\nobreakspace  {}terrain, because their filters span to the\nobreakspace  {}area behind the\nobreakspace  {}change. Due to the\nobreakspace  {}fact that a\nobreakspace  {}uniform quantizer with the\nobreakspace  {}step of $2D-1$ is applied to the\nobreakspace  {}residuals, the\nobreakspace  {}residuals added to the\nobreakspace  {}blue predictions will cause them to be shifted by $2D - 1$ to the\nobreakspace  {}top (the\nobreakspace  {}image on the\nobreakspace  {}left) or to the\nobreakspace  {}bottom (the\nobreakspace  {}image on the\nobreakspace  {}right), creating sharp peaks in the\nobreakspace  {}reconstructed values - the\nobreakspace  {}artifacts.}}{29}{figure.4.10}}
\newlabel{fig:artifs_theory}{{4.10}{29}{Two illustrations of how artifacts can occur near sharp terrain changes - the~black dots stand for the~predictions which are still within the~maximum-error bound $D$ from the~target terrain, the~blue dots represent the~predictions which are just slightly further from the~terrain, because their filters span to the~area behind the~change. Due to the~fact that a~uniform quantizer with the~step of $2D-1$ is applied to the~residuals, the~residuals added to the~blue predictions will cause them to be shifted by $2D - 1$ to the~top (the~image on the~left) or to the~bottom (the~image on the~right), creating sharp peaks in the~reconstructed values - the~artifacts}{figure.4.10}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.11}{\ignorespaces The\nobreakspace  {}prediction operator of $c$ - $\mathit  {P_{c}}$ - averages the\nobreakspace  {}compressed heights at all the\nobreakspace  {}pixels marked with a\nobreakspace  {}dot - $\bullet $. Both $a\bullet $ and $b\bullet $ are among these pixels.}}{30}{figure.4.11}}
\newlabel{fig:ccomp}{{4.11}{30}{The~prediction operator of $c$ - $\opnorm {P}{c}$ - averages the~compressed heights at all the~pixels marked with a~dot - $\bullet $. Both $a\bullet $ and $b\bullet $ are among these pixels}{figure.4.11}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.12}{\ignorespaces Handling of border cases in the\nobreakspace  {}computation of $\mathit  {P_{c}}$ - the\nobreakspace  {}red line represents the\nobreakspace  {}border. From among all the\nobreakspace  {}points which can be reached by the\nobreakspace  {}filter (marked as blue), only the\nobreakspace  {}interior ones (additionally marked with a\nobreakspace  {}dot) are averaged.}}{30}{figure.4.12}}
\newlabel{fig:cborders}{{4.12}{30}{Handling of border cases in the~computation of $\opnorm {P}{c}$ - the~red line represents the~border. From among all the~points which can be reached by the~filter (marked as blue), only the~interior ones (additionally marked with a~dot) are averaged}{figure.4.12}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.13}{\ignorespaces The\nobreakspace  {}caching of $\mathit  {P_{c}}$ during a\nobreakspace  {}digonal traversal computing predictions of all $c$ pixels. The\nobreakspace  {}arrow above the\nobreakspace  {}grid shows the\nobreakspace  {}direction of traversal - bottom-left to top-right, so that $c_1$ is predicted as first, $c_2$ as second and the\nobreakspace  {}traversal might continue further to the\nobreakspace  {}top-right. The\nobreakspace  {}left-right-stripped pixels are averaged to predict $c_1$, whereas the\nobreakspace  {}right-left-stripped pixels are averaged to predict $c_2$. Two pixels are inside both groups - they are stripped in both ways. Thus, the\nobreakspace  {}sum of them can be cached during the\nobreakspace  {}prediction of $c_1$ and reused inside the\nobreakspace  {}prediction of $c_2$, sparing one summation per prediction this way.}}{31}{figure.4.13}}
\newlabel{fig:ccaching}{{4.13}{31}{The~caching of $\opnorm {P}{c}$ during a~digonal traversal computing predictions of all $c$ pixels. The~arrow above the~grid shows the~direction of traversal - bottom-left to top-right, so that $c_1$ is predicted as first, $c_2$ as second and the~traversal might continue further to the~top-right. The~left-right-stripped pixels are averaged to predict $c_1$, whereas the~right-left-stripped pixels are averaged to predict $c_2$. Two pixels are inside both groups - they are stripped in both ways. Thus, the~sum of them can be cached during the~prediction of $c_1$ and reused inside the~prediction of $c_2$, sparing one summation per prediction this way}{figure.4.13}{}}
\@setckpt{details}{
\setcounter{page}{33}
\setcounter{equation}{4}
\setcounter{enumi}{0}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{4}
\setcounter{section}{2}
\setcounter{subsection}{0}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{13}
\setcounter{table}{0}
\setcounter{parentequation}{0}
\setcounter{Item}{0}
\setcounter{Hfootnote}{2}
\setcounter{bookmark@seq@number}{12}
\setcounter{section@level}{1}
}
